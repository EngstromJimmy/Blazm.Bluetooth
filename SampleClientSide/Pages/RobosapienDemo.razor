@page "/RobosapienDemo"
@using Blazm.Bluetooth
@using Devices.Wowwee;
@inject BluetoothNavigator navigator



<h3>Robosapien Blue</h3>

<button @onclick="Connect">Connect</button>
<button @onclick="@(async ()=>{ await SendCommand(Robosapien.SFXBurp); })">Burp</button>
<button @onclick="@(async ()=>{ await SendCommand(Robosapien.SFXOops); })">Oops</button>

<button @onclick="@(async ()=>{ await SendCommand(Robosapien.LeftHandForward); })">LeftHandForward</button>
<button @onclick="@(async ()=>{ await SendCommand(Robosapien.LeftHandBackward); })">RightHandForward</button>

<button @onclick="@(async ()=>{ await SendCommand(Robosapien.LeftShoulderForward); })">LeftShoulderForward</button>
<button @onclick="@(async ()=>{ await SendCommand(Robosapien.LeftShoulderBackward); })">LeftShoulderBackward</button>


<button @onclick="@(async ()=>{ await SendCommand(Robosapien.RightHandForward); })">RightHandForward</button>
<button @onclick="@(async ()=>{ await SendCommand(Robosapien.RightHandBackward); })">RightHandBackward</button>

<button @onclick="@(async ()=>{ await SendCommand(Robosapien.RightShoulderForward); })">RightShoulderForward</button>
<button @onclick="@(async ()=>{ await SendCommand(Robosapien.RightShoulderBackward); })">RightShoulderBackward</button>




@code {

    Device robosapien;
    string serviceId;
    string characteristicId;

    protected async Task Connect()
    {
        serviceId = "0000ffe5-0000-1000-8000-00805f9b34fb";
        characteristicId = "0000ffe9-0000-1000-8000-00805f9b34fb";

        var q = new RequestDeviceQuery();
        q.Filters.Add(new Filter() { Name = "Robosapien Blue" });
        q.OptionalServices.Add("0000ffe5-0000-1000-8000-00805f9b34fb");
        robosapien = await navigator.RequestDeviceAsync(q);
    }

    public async Task SendCommand(string hexCommand)
    {
        //<1. Write to characteristic>
        await navigator.WriteValueAsync(robosapien.Id, serviceId, characteristicId, StringToByteArray(hexCommand));
        //</1. Write to characteristic>
    }

    public byte[] StringToByteArray(string hex)
    {
        var bytes = Enumerable.Range(0, hex.Length)
                         .Where(x => x % 2 == 0)
                         .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
                         .ToArray();
        return bytes;
    }
}
