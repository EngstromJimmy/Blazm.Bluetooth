@page "/AnderssonScaleDemo"
@page "/"
@*<1. AddNamespace>*@
@using Blazm.Bluetooth
@*</1. AddNamespace>*@
@*<2. AddBluetoothNavigator>*@
@inject IBluetoothNavigator navigator
@*</2. AddBluetoothNavigator>*@


<h3>AnderssonScale</h3>
@*<4. ShowWeight>*@
@weight
@*</4. ShowWeight>*@
<button @onclick="Connect">Connect</button>

@code {
    @*<3. AddWeightVariable>*@
    int weight = 0;
    @*</3. AddWeightVariable>*@

    protected async Task Connect()
    {
        var serviceid = "0000ffb0-0000-1000-8000-00805f9b34fb";
        var characteristics = "0000ffb2-0000-1000-8000-00805f9b34fb";
        
        @*<5. AddFilter>*@
        var q = new RequestDeviceQuery();
        q.Filters.Add(new Filter() { Services = { serviceid } });
        @*</5. AddFilter>*@

        @*<6. RequestDevice>*@
        var device = await navigator.RequestDeviceAsync(q);
        @*</6. RequestDevice>*@

        @*<7. Setup notification>*@
        await device.SetupNotifyAsync(serviceid, characteristics);
        device.Notification += Value_Notification;
        @*</7. Setup notification>*@
    }

    @*<8. HandleNotification>*@
    private void Value_Notification(object sender, CharacteristicEventArgs e)
    {
        var data = e.Value;
        weight = (256 * data[4]) + data[5];
        if (data[7] == 1)
        {
            weight *= -1;
        }

        StateHasChanged();
    }
    @*</8. HandleNotification>*@
}
